{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { getToken } from 'firebase/messaging';\nimport { messaging } from '../config/firebase';\nconst useFCM = () => {\n  _s();\n  const [fcmToken, setFcmToken] = useState(null);\n  useEffect(() => {\n    const initializeFCM = async () => {\n      try {\n        // Check current permission\n        let permission = Notification.permission;\n\n        // If denied, show message about enabling notifications\n        if (permission === 'denied') {\n          console.log('Notifications are blocked. Please enable them in your browser settings.');\n          // You could show a UI message here instructing the user\n          return;\n        }\n\n        // If not granted yet, request permission\n        if (permission === 'default') {\n          console.log('Requesting notification permission...');\n          permission = await Notification.requestPermission();\n        }\n        if (permission === 'granted') {\n          console.log('Notification permission granted');\n\n          // Register SW and get token\n          const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js');\n          await navigator.serviceWorker.ready;\n          const token = await getToken(messaging, {\n            vapidKey: process.env.REACT_APP_FIREBASE_VAPID_KEY,\n            serviceWorkerRegistration: registration\n          });\n          if (token) {\n            console.log('FCM Token:', token);\n\n            // Register with backend\n            const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/v1/notifications/register-device`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\n              },\n              body: JSON.stringify({\n                fcmToken: token\n              })\n            });\n            if (response.ok) {\n              localStorage.setItem('fcmToken', token);\n              setFcmToken(token);\n            } else {\n              throw new Error('Failed to register device with backend');\n            }\n          }\n        }\n      } catch (error) {\n        console.error('FCM initialization error:', error);\n      }\n    };\n    const authToken = localStorage.getItem('token');\n    if (authToken) {\n      initializeFCM();\n    }\n  }, []);\n  return fcmToken;\n};\n_s(useFCM, \"yWAJiCjqDmPGaZpTwZgC83E6p44=\");\nexport default useFCM;","map":{"version":3,"names":["useEffect","useState","getToken","messaging","useFCM","_s","fcmToken","setFcmToken","initializeFCM","permission","Notification","console","log","requestPermission","registration","navigator","serviceWorker","register","ready","token","vapidKey","process","env","REACT_APP_FIREBASE_VAPID_KEY","serviceWorkerRegistration","response","fetch","REACT_APP_API_BASE_URL","method","headers","localStorage","getItem","body","JSON","stringify","ok","setItem","Error","error","authToken"],"sources":["C:/Users/TTC/OneDrive/Documents/GITHUB/fe-readhub/src/hooks/useFCM.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { getToken } from 'firebase/messaging';\r\nimport { messaging } from '../config/firebase';\r\n\r\nconst useFCM = () => {\r\n  const [fcmToken, setFcmToken] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const initializeFCM = async () => {\r\n      try {\r\n        // Check current permission\r\n        let permission = Notification.permission;\r\n\r\n        // If denied, show message about enabling notifications\r\n        if (permission === 'denied') {\r\n          console.log('Notifications are blocked. Please enable them in your browser settings.');\r\n          // You could show a UI message here instructing the user\r\n          return;\r\n        }\r\n\r\n        // If not granted yet, request permission\r\n        if (permission === 'default') {\r\n          console.log('Requesting notification permission...');\r\n          permission = await Notification.requestPermission();\r\n        }\r\n\r\n        if (permission === 'granted') {\r\n          console.log('Notification permission granted');\r\n\r\n          // Register SW and get token\r\n          const registration = await navigator.serviceWorker.register('/firebase-messaging-sw.js');\r\n          await navigator.serviceWorker.ready;\r\n\r\n          const token = await getToken(messaging, {\r\n            vapidKey: process.env.REACT_APP_FIREBASE_VAPID_KEY,\r\n            serviceWorkerRegistration: registration\r\n          });\r\n\r\n          if (token) {\r\n            console.log('FCM Token:', token);\r\n\r\n            // Register with backend\r\n            const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/api/v1/notifications/register-device`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${localStorage.getItem('token')}`\r\n              },\r\n              body: JSON.stringify({ fcmToken: token })\r\n            });\r\n\r\n            if (response.ok) {\r\n              localStorage.setItem('fcmToken', token);\r\n              setFcmToken(token);\r\n            } else {\r\n              throw new Error('Failed to register device with backend');\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('FCM initialization error:', error);\r\n      }\r\n    };\r\n\r\n    const authToken = localStorage.getItem('token');\r\n    if (authToken) {\r\n      initializeFCM();\r\n    }\r\n  }, []);\r\n\r\n  return fcmToken;\r\n};\r\n\r\nexport default useFCM;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,SAAS,QAAQ,oBAAoB;AAE9C,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,MAAMQ,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF;QACA,IAAIC,UAAU,GAAGC,YAAY,CAACD,UAAU;;QAExC;QACA,IAAIA,UAAU,KAAK,QAAQ,EAAE;UAC3BE,OAAO,CAACC,GAAG,CAAC,yEAAyE,CAAC;UACtF;UACA;QACF;;QAEA;QACA,IAAIH,UAAU,KAAK,SAAS,EAAE;UAC5BE,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;UACpDH,UAAU,GAAG,MAAMC,YAAY,CAACG,iBAAiB,CAAC,CAAC;QACrD;QAEA,IAAIJ,UAAU,KAAK,SAAS,EAAE;UAC5BE,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;UAE9C;UACA,MAAME,YAAY,GAAG,MAAMC,SAAS,CAACC,aAAa,CAACC,QAAQ,CAAC,2BAA2B,CAAC;UACxF,MAAMF,SAAS,CAACC,aAAa,CAACE,KAAK;UAEnC,MAAMC,KAAK,GAAG,MAAMjB,QAAQ,CAACC,SAAS,EAAE;YACtCiB,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,4BAA4B;YAClDC,yBAAyB,EAAEV;UAC7B,CAAC,CAAC;UAEF,IAAIK,KAAK,EAAE;YACTR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEO,KAAK,CAAC;;YAEhC;YACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,CAACC,GAAG,CAACK,sBAAsB,uCAAuC,EAAE;cACzGC,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBACP,cAAc,EAAE,kBAAkB;gBAClC,eAAe,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;cAC1D,CAAC;cACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBAAE5B,QAAQ,EAAEa;cAAM,CAAC;YAC1C,CAAC,CAAC;YAEF,IAAIM,QAAQ,CAACU,EAAE,EAAE;cACfL,YAAY,CAACM,OAAO,CAAC,UAAU,EAAEjB,KAAK,CAAC;cACvCZ,WAAW,CAACY,KAAK,CAAC;YACpB,CAAC,MAAM;cACL,MAAM,IAAIkB,KAAK,CAAC,wCAAwC,CAAC;YAC3D;UACF;QACF;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACd3B,OAAO,CAAC2B,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAED,MAAMC,SAAS,GAAGT,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC/C,IAAIQ,SAAS,EAAE;MACb/B,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,QAAQ;AACjB,CAAC;AAACD,EAAA,CAnEID,MAAM;AAqEZ,eAAeA,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}